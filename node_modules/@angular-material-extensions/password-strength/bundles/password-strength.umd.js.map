{"version":3,"file":"password-strength.umd.js","sources":["../../tmp/module/enum/criteria.enum.ts","../../tmp/module/enum/colors.enum.ts","../../tmp/module/validator/mat-password-strength-validator.ts","../../tmp/module/validator/regexp.class.ts","../../tmp/module/component/mat-password-strength/mat-password-strength.component.ts","../../tmp/module/animations/index.ts","../../tmp/module/component/mat-password-strength-info/mat-password-strength-info.component.ts","../../tmp/module/component/mat-pass-toggle-visibility/mat-pass-toggle-visibility.component.ts","../../tmp/module/mat-password-strength.module.ts"],"sourcesContent":["export enum Criteria {\n  at_least_eight_chars = 'minChar',\n  at_least_one_lower_case_char = 'lowerCase',\n  at_least_one_upper_case_char = 'upperCase',\n  at_least_one_digit_char = 'digit',\n  at_least_one_special_char = ' specialChar',\n  at_custom_chars = 'customChars'\n}\n","export enum Colors {\n  primary = 'primary',\n  accent = 'accent',\n  warn = 'warn'\n}\n","import {AbstractControl, ValidatorFn} from '@angular/forms';\n\nexport class MatPasswordStrengthValidator {\n\n  isUndefinedOrEmpty(control: AbstractControl): any | undefined {\n    if (!control || !control.value || control.value.length === 0) {\n      return undefined;\n    }\n  }\n\n  validate(criteria: string, regex: RegExp): ValidatorFn {\n    const validator = (control: AbstractControl): { [key: string]: any } => {\n      this.isUndefinedOrEmpty(control);\n      if (!regex.test(control.value)) {\n        const failed = {};\n        failed[criteria] = {\n          actualValue: control.value,\n          requiredPattern: regex\n        };\n        return failed;\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n  confirm(password: string): ValidatorFn {\n    const validator = (control: AbstractControl): { [key: string]: any } => {\n      this.isUndefinedOrEmpty(control);\n      if (control.value !== password) {\n        return {\n          notConfirmed: {\n            password: password,\n            passwordConfirmation: control.value\n          }\n        }\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n}\n","export const RegExpValidator = {\n  'lowerCase': RegExp(/^(?=.*?[a-z])/),\n  'upperCase': RegExp(/^(?=.*?[A-Z])/),\n  'digit': RegExp(/^(?=.*?[0-9])/),\n  'specialChar': RegExp(/^(?=.*?[\" !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"])/),\n};\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\nimport {FormControl, ValidatorFn, Validators} from '@angular/forms';\nimport {ThemePalette} from '@angular/material';\nimport {Criteria} from '../../enum/criteria.enum';\nimport {Colors} from '../../enum/colors.enum';\nimport {MatPasswordStrengthValidator} from '../../validator/mat-password-strength-validator';\nimport {RegExpValidator} from '../../validator/regexp.class';\n\n\n@Component({\n  selector: 'mat-password-strength',\n  exportAs: 'matPasswordStrength',\n  template: `\n    <mat-progress-bar mode=\"determinate\"\n                      [color]=\"color\"\n                      [value]=\"strength\">\n    </mat-progress-bar>\n  `,\n  styles: [`\n    .green :host::ng-deep .mat-progress-bar.mat-primary .mat-progress-bar-fill:after{background-color:#43a047}\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatPasswordStrengthComponent implements OnInit, OnChanges {\n\n  @Input() password: string;\n  @Input() externalError: boolean;\n\n  @Input() enableLengthRule = true;\n  @Input() enableLowerCaseLetterRule = true;\n  @Input() enableUpperCaseLetterRule = true;\n  @Input() enableDigitRule = true;\n  @Input() enableSpecialCharRule = true;\n\n  @Input() min = 8;\n  @Input() max = 30;\n  @Input() customValidator: RegExp;\n\n  @Output()\n  onStrengthChanged: EventEmitter<number> = new EventEmitter();\n\n  criteriaMap = new Map<Criteria, RegExp>();\n\n  containAtLeastMinChars: boolean;\n  containAtLeastOneLowerCaseLetter: boolean;\n  containAtLeastOneUpperCaseLetter: boolean;\n  containAtLeastOneDigit: boolean;\n  containAtLeastOneSpecialChar: boolean;\n  containAtCustomChars: boolean;\n\n  // TO ACCESS VIA CONTENT CHILD\n  passwordFormControl: FormControl = new FormControl();\n  passwordConfirmationFormControl: FormControl = new FormControl();\n\n  validatorsArray: ValidatorFn[] = [];\n\n  private _strength = 0;\n  private _color: ThemePalette;\n\n  Validators: ValidatorFn;\n  matPasswordStrengthValidator = new MatPasswordStrengthValidator();\n\n  ngOnInit(): void {\n    this.setRulesAndValidators();\n\n    if (this.password) {\n      this.calculatePasswordStrength();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ((changes.externalError && changes.externalError.firstChange) || changes.password.isFirstChange()) {\n      return;\n    } else if (changes.externalError && changes.externalError.currentValue) {\n      this._color = Colors.warn;\n      return;\n    } else if (changes.password.previousValue === changes.password.currentValue && !changes.password.firstChange) {\n      this.calculatePasswordStrength();\n    } else {\n      this.password && this.password.length > 0 ?\n        this.calculatePasswordStrength() : this.reset();\n    }\n  }\n\n  get strength(): number {\n    return this._strength ? this._strength : 0;\n  }\n\n  get color(): ThemePalette {\n\n    if (this._strength <= 20) {\n      return Colors.warn;\n    } else if (this._strength <= 80) {\n      return Colors.accent;\n    } else {\n      return Colors.primary;\n    }\n  }\n\n  private _containAtLeastMinChars(): boolean {\n    this.containAtLeastMinChars = this.password.length >= this.min;\n    return this.containAtLeastMinChars;\n  }\n\n  private _containAtLeastOneLowerCaseLetter(): boolean {\n    this.containAtLeastOneLowerCaseLetter =\n      this.criteriaMap\n        .get(Criteria.at_least_one_lower_case_char)\n        .test(this.password);\n    return this.containAtLeastOneLowerCaseLetter;\n  }\n\n  private _containAtLeastOneUpperCaseLetter(): boolean {\n    this.containAtLeastOneUpperCaseLetter =\n      this.criteriaMap\n        .get(Criteria.at_least_one_upper_case_char)\n        .test(this.password);\n    return this.containAtLeastOneUpperCaseLetter;\n  }\n\n  private _containAtLeastOneDigit(): boolean {\n    this.containAtLeastOneDigit =\n      this.criteriaMap\n        .get(Criteria.at_least_one_digit_char)\n        .test(this.password);\n    return this.containAtLeastOneDigit;\n  }\n\n  private _containAtLeastOneSpecialChar(): boolean {\n    this.containAtLeastOneSpecialChar =\n      this.criteriaMap\n        .get(Criteria.at_least_one_special_char)\n        .test(this.password);\n    return this.containAtLeastOneSpecialChar;\n  }\n\n  private _containCustomChars(): boolean {\n    this.containAtCustomChars =\n      this.criteriaMap\n        .get(Criteria.at_custom_chars)\n        .test(this.password);\n    return this.containAtCustomChars;\n  }\n\n  parseCustomValidatorsRegex(value: string | RegExp = this.customValidator) {\n    if (this.customValidator instanceof RegExp) {\n      return this.customValidator;\n    } else if (typeof this.customValidator === 'string') {\n      return RegExp(this.customValidator);\n    }\n  }\n\n  setRulesAndValidators(): void {\n    this.validatorsArray = [];\n    this.criteriaMap = new Map<Criteria, RegExp>();\n    this.passwordConfirmationFormControl\n      .setValidators(Validators.compose([\n        Validators.required, this.matPasswordStrengthValidator.confirm(this.password)\n      ]));\n    this.validatorsArray.push(Validators.required);\n    if (this.enableLengthRule) {\n      this.criteriaMap.set(Criteria.at_least_eight_chars, RegExp(`^.{${this.min},${this.max}}$`));\n      this.validatorsArray.push(Validators.minLength(this.min));\n      this.validatorsArray.push(Validators.maxLength(this.max));\n    }\n    if (this.enableLowerCaseLetterRule) {\n      this.criteriaMap.set(Criteria.at_least_one_lower_case_char, RegExpValidator.lowerCase);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.lowerCase))\n    }\n    if (this.enableUpperCaseLetterRule) {\n      this.criteriaMap.set(Criteria.at_least_one_upper_case_char, RegExpValidator.upperCase);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.upperCase))\n    }\n    if (this.enableDigitRule) {\n      this.criteriaMap.set(Criteria.at_least_one_digit_char, RegExpValidator.digit);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.digit))\n    }\n    if (this.enableSpecialCharRule) {\n      this.criteriaMap.set(Criteria.at_least_one_special_char, RegExpValidator.specialChar);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.specialChar))\n    }\n    if (this.customValidator) {\n      this.criteriaMap.set(Criteria.at_custom_chars, this.parseCustomValidatorsRegex());\n      this.validatorsArray.push(Validators.pattern(this.parseCustomValidatorsRegex()))\n    }\n\n    this.criteriaMap.forEach((value: any, key: string) => {\n      this.validatorsArray.push(this.matPasswordStrengthValidator.validate(key, value));\n    });\n\n    this.passwordFormControl.setValidators(Validators.compose([...this.validatorsArray]));\n    this.Validators = Validators.compose([...this.validatorsArray]);\n\n  }\n\n  calculatePasswordStrength(): void {\n    const requirements: Array<boolean> = [];\n    const unit = 100 / this.criteriaMap.size;\n\n    // console.log('this.criteriaMap.size = ', this.criteriaMap.size);\n    // console.log('unit = ', unit);\n\n    requirements.push(\n      this.enableLengthRule ? this._containAtLeastMinChars() : false,\n      this.enableLowerCaseLetterRule ? this._containAtLeastOneLowerCaseLetter() : false,\n      this.enableUpperCaseLetterRule ? this._containAtLeastOneUpperCaseLetter() : false,\n      this.enableDigitRule ? this._containAtLeastOneDigit() : false,\n      this.enableSpecialCharRule ? this._containAtLeastOneSpecialChar() : false,\n      this.customValidator ? this._containCustomChars() : false\n    );\n\n    this._strength = requirements.filter(v => v).length * unit;\n    // console.log('length = ', this._strength / unit);\n    this.onStrengthChanged.emit(this.strength);\n    this.setRulesAndValidators();\n  }\n\n  reset() {\n    this._strength = 0;\n    this.containAtLeastMinChars =\n      this.containAtLeastOneLowerCaseLetter =\n        this.containAtLeastOneUpperCaseLetter =\n          this.containAtLeastOneDigit =\n            this.containAtCustomChars =\n              this.containAtLeastOneSpecialChar = false;\n  }\n}\n","import {animate, animation, AnimationReferenceMetadata, keyframes, style} from '@angular/animations';\n\nexport function flipIn(timing: number, rotateX: number, rotateY: number): AnimationReferenceMetadata {\n  const params = {timing: timing, delay: 0, rotateX, rotateY};\n\n  return animation(\n    [\n      style({'backface-visibility': 'visible'}),\n      animate(\n        '{{ timing }}s {{ delay }}s ease-in',\n        keyframes([\n          style({\n            opacity: 0,\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n            offset: 0,\n          }),\n          style({\n            opacity: 1,\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n            offset: 0.4,\n          }),\n          style({\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n            offset: 0.6,\n          }),\n          style({\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n            offset: 0.8,\n          }),\n          style({\n            transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n            offset: 1,\n          }),\n        ])\n      ),\n    ],\n    {params}\n  );\n}\n\nexport const flipInX = flipIn(1, 1, 0);\nexport const flipInY = flipIn(1, 0, 1);\n\nexport const shake = animation(\n  animate(\n    '{{ timing }}s {{ delay }}s',\n    keyframes([\n      style({transform: 'translate3d(0, 0, 0)', offset: 0}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.1}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.2}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.3}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.4}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.5}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.6}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.7}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.8}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.9}),\n      style({transform: 'translate3d(0, 0, 0)', offset: 1}),\n    ])\n  ),\n  {params: {timing: 1, delay: 0}}\n);\n","import {Component, Input, OnInit} from '@angular/core';\nimport {MatPasswordStrengthComponent} from '../mat-password-strength/mat-password-strength.component';\nimport {animate, animateChild, keyframes, query, stagger, style, transition, trigger, useAnimation} from '@angular/animations';\nimport {shake} from '../../animations/index';\n\n@Component({\n  selector: 'mat-password-strength-info',\n  exportAs: 'matPasswordStrengthInfo',\n  template: `\n    <mat-card @list>\n      <mat-card-content>\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableLowerCaseLetterRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastOneLowerCaseLetter; then done else error\" @flipY>\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{lowerCaseCriteriaMsg}}</span>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableUpperCaseLetterRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastOneUpperCaseLetter; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{upperCaseCriteriaMsg}}</span>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableDigitRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastOneDigit; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{digitsCriteriaMsg}}</span>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableSpecialCharRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastOneSpecialChar; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{specialCharsCriteriaMsg}}</span>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableLengthRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastMinChars; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{minCharsCriteriaMsg}}</span>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.customValidator\">\n          <div *ngIf=\"passwordComponent.containAtCustomChars; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{customCharsCriteriaMsg}}</span>\n        </div>\n\n        <div *ngIf=\"enableScoreInfo\" class=\"info-row\" @items>\n          <div *ngIf=\"passwordComponent.strength === 100; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>Password's strength = {{passwordComponent.strength}} %100</span>\n        </div>\n\n      </mat-card-content>\n    </mat-card>\n  `,\n  styles: [`\n    mat-card{-webkit-box-orient:horizontal;flex-direction:row;place-content:stretch center;-webkit-box-flex:1;flex:1 1 0}mat-card,mat-card mat-card-content{-webkit-box-direction:normal;box-sizing:border-box;display:-webkit-box;display:flex;-webkit-box-align:stretch;align-items:stretch}mat-card mat-card-content{-webkit-box-orient:vertical;flex-direction:column;max-width:100%;place-content:stretch flex-start}mat-card mat-card-content mat-icon{margin-right:10px}mat-card mat-card-content .info-row{-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;box-sizing:border-box;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center}\n  `],\n  animations: [\n    // nice stagger effect when showing existing elements\n    trigger('list', [\n      transition(':enter', [\n        // child animation selector + stagger\n        query('@items',\n          stagger(300, animateChild())\n        )\n      ]),\n    ]),\n    trigger('items', [\n      // cubic-bezier for a tiny bouncing feel\n      transition(':enter', [\n        style({transform: 'scale(0.5)', opacity: 0}),\n        animate('1s cubic-bezier(.8,-0.6,0.2,1.5)',\n          style({transform: 'scale(1)', opacity: 1}))\n      ]),\n      transition(':leave', [\n        style({transform: 'scale(1)', opacity: 1, height: '*'}),\n        animate('1s cubic-bezier(.8,-0.6,0.2,1.5)',\n          style({transform: 'scale(0.5)', opacity: 0, height: '0px', margin: '0px'}))\n      ]),\n    ]),\n    trigger('positiveState', [\n      transition(':enter', [\n        style({'backface-visibility': 'visible'}),\n        animate(\n          '{{ timing }}s {{ delay }}s ease-in',\n          keyframes([\n            style({\n              opacity: 0,\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n              offset: 0,\n            }),\n            style({\n              opacity: 1,\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n              offset: 0.4,\n            }),\n            style({\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n              offset: 0.6,\n            }),\n            style({\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n              offset: 0.8,\n            }),\n            style({\n              transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n              offset: 1,\n            }),\n          ])\n        ),\n      ], {params: {timing: 1, delay: 0, rotateX: 1, rotateY: 0}}),\n    ]),\n    trigger('negativeState', [\n      transition(':enter', useAnimation(shake)),\n    ]),\n  ],\n})\nexport class MatPasswordStrengthInfoComponent implements OnInit {\n\n  @Input()\n  passwordComponent: MatPasswordStrengthComponent;\n\n  @Input()\n  enableScoreInfo = false;\n\n  @Input()\n  lowerCaseCriteriaMsg = 'contains at least one lower character';\n\n  @Input()\n  upperCaseCriteriaMsg = 'contains at least one upper character';\n\n  @Input()\n  digitsCriteriaMsg = 'contains at least one digit character';\n\n  @Input()\n  specialCharsCriteriaMsg = 'contains at least one special character';\n\n  @Input()\n  customCharsCriteriaMsg = 'contains at least one custom character';\n\n  @Input()\n  minCharsCriteriaMsg: string;\n\n  ngOnInit(): void {\n    if (!this.minCharsCriteriaMsg) {\n      this.minCharsCriteriaMsg = `contains at least ${this.passwordComponent.min} characters`\n    }\n  }\n\n}\n","import {Component, Input, ViewEncapsulation} from '@angular/core';\n\ntype Type = 'text' | 'password' ;\n\n@Component({\n  selector: 'mat-pass-toggle-visibility',\n  template: `\n    <button (click)=\"isVisible = !isVisible\"\n            type=\"button\"\n            class=\"mat-icon-button cdk-focused cdk-mouse-focused\" mat-icon-button\n            matRippleCentered=\"true\"\n            matRipple>\n      <mat-icon>{{isVisible ? 'visibility' : 'visibility_off' }}</mat-icon>\n    </button>\n  `,\n  styles: [`\n\n  `],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MatPassToggleVisibilityComponent {\n\n  @Input()\n  isVisible: boolean;\n\n  _type: Type = 'text';\n\n  get type() {\n    return this.isVisible ? 'text' : 'password';\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {MatCardModule, MatIconModule, MatProgressBarModule, MatRippleModule} from '@angular/material';\n\nimport {MatPasswordStrengthComponent} from './component/mat-password-strength/mat-password-strength.component';\nimport {MatPasswordStrengthInfoComponent} from './component/mat-password-strength-info/mat-password-strength-info.component';\nimport {MatPassToggleVisibilityComponent} from './component/mat-pass-toggle-visibility/mat-pass-toggle-visibility.component';\n\n// Export module's public API\nexport {MatPasswordStrengthComponent} from './component/mat-password-strength/mat-password-strength.component';\nexport {\n  MatPasswordStrengthInfoComponent\n} from './component/mat-password-strength-info/mat-password-strength-info.component';\nexport {MatPassToggleVisibilityComponent} from './component/mat-pass-toggle-visibility/mat-pass-toggle-visibility.component';\nexport {MatPasswordStrengthValidator} from './validator/mat-password-strength-validator';\n// validator\nexport {RegExpValidator} from './validator/regexp.class';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatProgressBarModule,\n    MatCardModule,\n    MatIconModule,\n    MatRippleModule\n  ],\n  exports: [\n    MatPasswordStrengthComponent,\n    MatPasswordStrengthInfoComponent,\n    MatPassToggleVisibilityComponent\n  ],\n  declarations: [\n    MatPasswordStrengthComponent,\n    MatPasswordStrengthInfoComponent,\n    MatPassToggleVisibilityComponent\n  ],\n  entryComponents: [MatPassToggleVisibilityComponent]\n})\nexport class MatPasswordStrengthModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MatPasswordStrengthModule,\n      providers: []\n    };\n  }\n}\n"],"names":["EventEmitter","FormControl","Validators","Component","ChangeDetectionStrategy","Input","Output","animation","style","animate","keyframes","trigger","transition","query","stagger","animateChild","useAnimation","ViewEncapsulation","NgModule","CommonModule","MatProgressBarModule","MatCardModule","MatIconModule","MatRippleModule"],"mappings":"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"}