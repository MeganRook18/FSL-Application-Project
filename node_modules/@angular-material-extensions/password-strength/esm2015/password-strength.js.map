{"version":3,"file":"password-strength.js","sources":["../../tmp/module/enum/criteria.enum.ts","../../tmp/module/enum/colors.enum.ts","../../tmp/module/validator/mat-password-strength-validator.ts","../../tmp/module/validator/regexp.class.ts","../../tmp/module/component/mat-password-strength/mat-password-strength.component.ts","../../tmp/module/animations/index.ts","../../tmp/module/component/mat-password-strength-info/mat-password-strength-info.component.ts","../../tmp/module/component/mat-pass-toggle-visibility/mat-pass-toggle-visibility.component.ts","../../tmp/module/mat-password-strength.module.ts"],"sourcesContent":["export enum Criteria {\n  at_least_eight_chars = 'minChar',\n  at_least_one_lower_case_char = 'lowerCase',\n  at_least_one_upper_case_char = 'upperCase',\n  at_least_one_digit_char = 'digit',\n  at_least_one_special_char = ' specialChar',\n  at_custom_chars = 'customChars'\n}\n","export enum Colors {\n  primary = 'primary',\n  accent = 'accent',\n  warn = 'warn'\n}\n","import {AbstractControl, ValidatorFn} from '@angular/forms';\n\nexport class MatPasswordStrengthValidator {\n\n  isUndefinedOrEmpty(control: AbstractControl): any | undefined {\n    if (!control || !control.value || control.value.length === 0) {\n      return undefined;\n    }\n  }\n\n  validate(criteria: string, regex: RegExp): ValidatorFn {\n    const validator = (control: AbstractControl): { [key: string]: any } => {\n      this.isUndefinedOrEmpty(control);\n      if (!regex.test(control.value)) {\n        const failed = {};\n        failed[criteria] = {\n          actualValue: control.value,\n          requiredPattern: regex\n        };\n        return failed;\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n  confirm(password: string): ValidatorFn {\n    const validator = (control: AbstractControl): { [key: string]: any } => {\n      this.isUndefinedOrEmpty(control);\n      if (control.value !== password) {\n        return {\n          notConfirmed: {\n            password: password,\n            passwordConfirmation: control.value\n          }\n        }\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n}\n","export const RegExpValidator = {\n  'lowerCase': RegExp(/^(?=.*?[a-z])/),\n  'upperCase': RegExp(/^(?=.*?[A-Z])/),\n  'digit': RegExp(/^(?=.*?[0-9])/),\n  'specialChar': RegExp(/^(?=.*?[\" !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"])/),\n};\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\nimport {FormControl, ValidatorFn, Validators} from '@angular/forms';\nimport {ThemePalette} from '@angular/material';\nimport {Criteria} from '../../enum/criteria.enum';\nimport {Colors} from '../../enum/colors.enum';\nimport {MatPasswordStrengthValidator} from '../../validator/mat-password-strength-validator';\nimport {RegExpValidator} from '../../validator/regexp.class';\n\n\n@Component({\n  selector: 'mat-password-strength',\n  exportAs: 'matPasswordStrength',\n  template: `\n    <mat-progress-bar mode=\"determinate\"\n                      [color]=\"color\"\n                      [value]=\"strength\">\n    </mat-progress-bar>\n  `,\n  styles: [`\n    .green :host::ng-deep .mat-progress-bar.mat-primary .mat-progress-bar-fill:after{background-color:#43a047}\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatPasswordStrengthComponent implements OnInit, OnChanges {\n\n  @Input() password: string;\n  @Input() externalError: boolean;\n\n  @Input() enableLengthRule = true;\n  @Input() enableLowerCaseLetterRule = true;\n  @Input() enableUpperCaseLetterRule = true;\n  @Input() enableDigitRule = true;\n  @Input() enableSpecialCharRule = true;\n\n  @Input() min = 8;\n  @Input() max = 30;\n  @Input() customValidator: RegExp;\n\n  @Output()\n  onStrengthChanged: EventEmitter<number> = new EventEmitter();\n\n  criteriaMap = new Map<Criteria, RegExp>();\n\n  containAtLeastMinChars: boolean;\n  containAtLeastOneLowerCaseLetter: boolean;\n  containAtLeastOneUpperCaseLetter: boolean;\n  containAtLeastOneDigit: boolean;\n  containAtLeastOneSpecialChar: boolean;\n  containAtCustomChars: boolean;\n\n  // TO ACCESS VIA CONTENT CHILD\n  passwordFormControl: FormControl = new FormControl();\n  passwordConfirmationFormControl: FormControl = new FormControl();\n\n  validatorsArray: ValidatorFn[] = [];\n\n  private _strength = 0;\n  private _color: ThemePalette;\n\n  Validators: ValidatorFn;\n  matPasswordStrengthValidator = new MatPasswordStrengthValidator();\n\n  ngOnInit(): void {\n    this.setRulesAndValidators();\n\n    if (this.password) {\n      this.calculatePasswordStrength();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ((changes.externalError && changes.externalError.firstChange) || changes.password.isFirstChange()) {\n      return;\n    } else if (changes.externalError && changes.externalError.currentValue) {\n      this._color = Colors.warn;\n      return;\n    } else if (changes.password.previousValue === changes.password.currentValue && !changes.password.firstChange) {\n      this.calculatePasswordStrength();\n    } else {\n      this.password && this.password.length > 0 ?\n        this.calculatePasswordStrength() : this.reset();\n    }\n  }\n\n  get strength(): number {\n    return this._strength ? this._strength : 0;\n  }\n\n  get color(): ThemePalette {\n\n    if (this._strength <= 20) {\n      return Colors.warn;\n    } else if (this._strength <= 80) {\n      return Colors.accent;\n    } else {\n      return Colors.primary;\n    }\n  }\n\n  private _containAtLeastMinChars(): boolean {\n    this.containAtLeastMinChars = this.password.length >= this.min;\n    return this.containAtLeastMinChars;\n  }\n\n  private _containAtLeastOneLowerCaseLetter(): boolean {\n    this.containAtLeastOneLowerCaseLetter =\n      this.criteriaMap\n        .get(Criteria.at_least_one_lower_case_char)\n        .test(this.password);\n    return this.containAtLeastOneLowerCaseLetter;\n  }\n\n  private _containAtLeastOneUpperCaseLetter(): boolean {\n    this.containAtLeastOneUpperCaseLetter =\n      this.criteriaMap\n        .get(Criteria.at_least_one_upper_case_char)\n        .test(this.password);\n    return this.containAtLeastOneUpperCaseLetter;\n  }\n\n  private _containAtLeastOneDigit(): boolean {\n    this.containAtLeastOneDigit =\n      this.criteriaMap\n        .get(Criteria.at_least_one_digit_char)\n        .test(this.password);\n    return this.containAtLeastOneDigit;\n  }\n\n  private _containAtLeastOneSpecialChar(): boolean {\n    this.containAtLeastOneSpecialChar =\n      this.criteriaMap\n        .get(Criteria.at_least_one_special_char)\n        .test(this.password);\n    return this.containAtLeastOneSpecialChar;\n  }\n\n  private _containCustomChars(): boolean {\n    this.containAtCustomChars =\n      this.criteriaMap\n        .get(Criteria.at_custom_chars)\n        .test(this.password);\n    return this.containAtCustomChars;\n  }\n\n  parseCustomValidatorsRegex(value: string | RegExp = this.customValidator) {\n    if (this.customValidator instanceof RegExp) {\n      return this.customValidator;\n    } else if (typeof this.customValidator === 'string') {\n      return RegExp(this.customValidator);\n    }\n  }\n\n  setRulesAndValidators(): void {\n    this.validatorsArray = [];\n    this.criteriaMap = new Map<Criteria, RegExp>();\n    this.passwordConfirmationFormControl\n      .setValidators(Validators.compose([\n        Validators.required, this.matPasswordStrengthValidator.confirm(this.password)\n      ]));\n    this.validatorsArray.push(Validators.required);\n    if (this.enableLengthRule) {\n      this.criteriaMap.set(Criteria.at_least_eight_chars, RegExp(`^.{${this.min},${this.max}}$`));\n      this.validatorsArray.push(Validators.minLength(this.min));\n      this.validatorsArray.push(Validators.maxLength(this.max));\n    }\n    if (this.enableLowerCaseLetterRule) {\n      this.criteriaMap.set(Criteria.at_least_one_lower_case_char, RegExpValidator.lowerCase);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.lowerCase))\n    }\n    if (this.enableUpperCaseLetterRule) {\n      this.criteriaMap.set(Criteria.at_least_one_upper_case_char, RegExpValidator.upperCase);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.upperCase))\n    }\n    if (this.enableDigitRule) {\n      this.criteriaMap.set(Criteria.at_least_one_digit_char, RegExpValidator.digit);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.digit))\n    }\n    if (this.enableSpecialCharRule) {\n      this.criteriaMap.set(Criteria.at_least_one_special_char, RegExpValidator.specialChar);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.specialChar))\n    }\n    if (this.customValidator) {\n      this.criteriaMap.set(Criteria.at_custom_chars, this.parseCustomValidatorsRegex());\n      this.validatorsArray.push(Validators.pattern(this.parseCustomValidatorsRegex()))\n    }\n\n    this.criteriaMap.forEach((value: any, key: string) => {\n      this.validatorsArray.push(this.matPasswordStrengthValidator.validate(key, value));\n    });\n\n    this.passwordFormControl.setValidators(Validators.compose([...this.validatorsArray]));\n    this.Validators = Validators.compose([...this.validatorsArray]);\n\n  }\n\n  calculatePasswordStrength(): void {\n    const requirements: Array<boolean> = [];\n    const unit = 100 / this.criteriaMap.size;\n\n    // console.log('this.criteriaMap.size = ', this.criteriaMap.size);\n    // console.log('unit = ', unit);\n\n    requirements.push(\n      this.enableLengthRule ? this._containAtLeastMinChars() : false,\n      this.enableLowerCaseLetterRule ? this._containAtLeastOneLowerCaseLetter() : false,\n      this.enableUpperCaseLetterRule ? this._containAtLeastOneUpperCaseLetter() : false,\n      this.enableDigitRule ? this._containAtLeastOneDigit() : false,\n      this.enableSpecialCharRule ? this._containAtLeastOneSpecialChar() : false,\n      this.customValidator ? this._containCustomChars() : false\n    );\n\n    this._strength = requirements.filter(v => v).length * unit;\n    // console.log('length = ', this._strength / unit);\n    this.onStrengthChanged.emit(this.strength);\n    this.setRulesAndValidators();\n  }\n\n  reset() {\n    this._strength = 0;\n    this.containAtLeastMinChars =\n      this.containAtLeastOneLowerCaseLetter =\n        this.containAtLeastOneUpperCaseLetter =\n          this.containAtLeastOneDigit =\n            this.containAtCustomChars =\n              this.containAtLeastOneSpecialChar = false;\n  }\n}\n","import {animate, animation, AnimationReferenceMetadata, keyframes, style} from '@angular/animations';\n\nexport function flipIn(timing: number, rotateX: number, rotateY: number): AnimationReferenceMetadata {\n  const params = {timing: timing, delay: 0, rotateX, rotateY};\n\n  return animation(\n    [\n      style({'backface-visibility': 'visible'}),\n      animate(\n        '{{ timing }}s {{ delay }}s ease-in',\n        keyframes([\n          style({\n            opacity: 0,\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n            offset: 0,\n          }),\n          style({\n            opacity: 1,\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n            offset: 0.4,\n          }),\n          style({\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n            offset: 0.6,\n          }),\n          style({\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n            offset: 0.8,\n          }),\n          style({\n            transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n            offset: 1,\n          }),\n        ])\n      ),\n    ],\n    {params}\n  );\n}\n\nexport const flipInX = flipIn(1, 1, 0);\nexport const flipInY = flipIn(1, 0, 1);\n\nexport const shake = animation(\n  animate(\n    '{{ timing }}s {{ delay }}s',\n    keyframes([\n      style({transform: 'translate3d(0, 0, 0)', offset: 0}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.1}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.2}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.3}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.4}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.5}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.6}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.7}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.8}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.9}),\n      style({transform: 'translate3d(0, 0, 0)', offset: 1}),\n    ])\n  ),\n  {params: {timing: 1, delay: 0}}\n);\n","import {Component, Input, OnInit} from '@angular/core';\nimport {MatPasswordStrengthComponent} from '../mat-password-strength/mat-password-strength.component';\nimport {animate, animateChild, keyframes, query, stagger, style, transition, trigger, useAnimation} from '@angular/animations';\nimport {shake} from '../../animations/index';\n\n@Component({\n  selector: 'mat-password-strength-info',\n  exportAs: 'matPasswordStrengthInfo',\n  template: `\n    <mat-card @list>\n      <mat-card-content>\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableLowerCaseLetterRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastOneLowerCaseLetter; then done else error\" @flipY>\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{lowerCaseCriteriaMsg}}</span>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableUpperCaseLetterRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastOneUpperCaseLetter; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{upperCaseCriteriaMsg}}</span>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableDigitRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastOneDigit; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{digitsCriteriaMsg}}</span>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableSpecialCharRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastOneSpecialChar; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{specialCharsCriteriaMsg}}</span>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableLengthRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastMinChars; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{minCharsCriteriaMsg}}</span>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.customValidator\">\n          <div *ngIf=\"passwordComponent.containAtCustomChars; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{customCharsCriteriaMsg}}</span>\n        </div>\n\n        <div *ngIf=\"enableScoreInfo\" class=\"info-row\" @items>\n          <div *ngIf=\"passwordComponent.strength === 100; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>Password's strength = {{passwordComponent.strength}} %100</span>\n        </div>\n\n      </mat-card-content>\n    </mat-card>\n  `,\n  styles: [`\n    mat-card{-webkit-box-orient:horizontal;flex-direction:row;place-content:stretch center;-webkit-box-flex:1;flex:1 1 0}mat-card,mat-card mat-card-content{-webkit-box-direction:normal;box-sizing:border-box;display:-webkit-box;display:flex;-webkit-box-align:stretch;align-items:stretch}mat-card mat-card-content{-webkit-box-orient:vertical;flex-direction:column;max-width:100%;place-content:stretch flex-start}mat-card mat-card-content mat-icon{margin-right:10px}mat-card mat-card-content .info-row{-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;box-sizing:border-box;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center}\n  `],\n  animations: [\n    // nice stagger effect when showing existing elements\n    trigger('list', [\n      transition(':enter', [\n        // child animation selector + stagger\n        query('@items',\n          stagger(300, animateChild())\n        )\n      ]),\n    ]),\n    trigger('items', [\n      // cubic-bezier for a tiny bouncing feel\n      transition(':enter', [\n        style({transform: 'scale(0.5)', opacity: 0}),\n        animate('1s cubic-bezier(.8,-0.6,0.2,1.5)',\n          style({transform: 'scale(1)', opacity: 1}))\n      ]),\n      transition(':leave', [\n        style({transform: 'scale(1)', opacity: 1, height: '*'}),\n        animate('1s cubic-bezier(.8,-0.6,0.2,1.5)',\n          style({transform: 'scale(0.5)', opacity: 0, height: '0px', margin: '0px'}))\n      ]),\n    ]),\n    trigger('positiveState', [\n      transition(':enter', [\n        style({'backface-visibility': 'visible'}),\n        animate(\n          '{{ timing }}s {{ delay }}s ease-in',\n          keyframes([\n            style({\n              opacity: 0,\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n              offset: 0,\n            }),\n            style({\n              opacity: 1,\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n              offset: 0.4,\n            }),\n            style({\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n              offset: 0.6,\n            }),\n            style({\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n              offset: 0.8,\n            }),\n            style({\n              transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n              offset: 1,\n            }),\n          ])\n        ),\n      ], {params: {timing: 1, delay: 0, rotateX: 1, rotateY: 0}}),\n    ]),\n    trigger('negativeState', [\n      transition(':enter', useAnimation(shake)),\n    ]),\n  ],\n})\nexport class MatPasswordStrengthInfoComponent implements OnInit {\n\n  @Input()\n  passwordComponent: MatPasswordStrengthComponent;\n\n  @Input()\n  enableScoreInfo = false;\n\n  @Input()\n  lowerCaseCriteriaMsg = 'contains at least one lower character';\n\n  @Input()\n  upperCaseCriteriaMsg = 'contains at least one upper character';\n\n  @Input()\n  digitsCriteriaMsg = 'contains at least one digit character';\n\n  @Input()\n  specialCharsCriteriaMsg = 'contains at least one special character';\n\n  @Input()\n  customCharsCriteriaMsg = 'contains at least one custom character';\n\n  @Input()\n  minCharsCriteriaMsg: string;\n\n  ngOnInit(): void {\n    if (!this.minCharsCriteriaMsg) {\n      this.minCharsCriteriaMsg = `contains at least ${this.passwordComponent.min} characters`\n    }\n  }\n\n}\n","import {Component, Input, ViewEncapsulation} from '@angular/core';\n\ntype Type = 'text' | 'password' ;\n\n@Component({\n  selector: 'mat-pass-toggle-visibility',\n  template: `\n    <button (click)=\"isVisible = !isVisible\"\n            type=\"button\"\n            class=\"mat-icon-button cdk-focused cdk-mouse-focused\" mat-icon-button\n            matRippleCentered=\"true\"\n            matRipple>\n      <mat-icon>{{isVisible ? 'visibility' : 'visibility_off' }}</mat-icon>\n    </button>\n  `,\n  styles: [`\n\n  `],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MatPassToggleVisibilityComponent {\n\n  @Input()\n  isVisible: boolean;\n\n  _type: Type = 'text';\n\n  get type() {\n    return this.isVisible ? 'text' : 'password';\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {MatCardModule, MatIconModule, MatProgressBarModule, MatRippleModule} from '@angular/material';\n\nimport {MatPasswordStrengthComponent} from './component/mat-password-strength/mat-password-strength.component';\nimport {MatPasswordStrengthInfoComponent} from './component/mat-password-strength-info/mat-password-strength-info.component';\nimport {MatPassToggleVisibilityComponent} from './component/mat-pass-toggle-visibility/mat-pass-toggle-visibility.component';\n\n// Export module's public API\nexport {MatPasswordStrengthComponent} from './component/mat-password-strength/mat-password-strength.component';\nexport {\n  MatPasswordStrengthInfoComponent\n} from './component/mat-password-strength-info/mat-password-strength-info.component';\nexport {MatPassToggleVisibilityComponent} from './component/mat-pass-toggle-visibility/mat-pass-toggle-visibility.component';\nexport {MatPasswordStrengthValidator} from './validator/mat-password-strength-validator';\n// validator\nexport {RegExpValidator} from './validator/regexp.class';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatProgressBarModule,\n    MatCardModule,\n    MatIconModule,\n    MatRippleModule\n  ],\n  exports: [\n    MatPasswordStrengthComponent,\n    MatPasswordStrengthInfoComponent,\n    MatPassToggleVisibilityComponent\n  ],\n  declarations: [\n    MatPasswordStrengthComponent,\n    MatPasswordStrengthInfoComponent,\n    MatPassToggleVisibilityComponent\n  ],\n  entryComponents: [MatPassToggleVisibilityComponent]\n})\nexport class MatPasswordStrengthModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MatPasswordStrengthModule,\n      providers: []\n    };\n  }\n}\n"],"names":[],"mappings":"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"}